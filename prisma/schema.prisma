// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model MatchResult {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  selfie    String
  images    String[]
  matches   String[]
  createdAt DateTime @default(now())
}

model OnboardingScreen {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  order      Int
  title      String
  subTitle   String?
  MainTitle  String?
  imageUrl   String?
  bgUrl      String?
  buttonText String?
  isEnabled  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserModel {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  uid              String            @unique
  email            String?           @unique
  phoneNumber      String?           @unique
  firstName        String?
  lastName         String?
  imageUrl         String?
  groupMemberships GroupMembership[] // All groups the user is a member of
  ownedGroups      Group[]           @relation("GroupOwner")
  uploadPhoto      Photo[]
  uploadVideo      Video[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
}

model Group {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  uCode       String            @unique
  privacyType PrivacyType
  imageUrl    String
  ownerId     String            @db.ObjectId
  owner       UserModel         @relation("GroupOwner", fields: [ownerId], references: [id])
  memberships GroupMembership[]
  photos      Photo[]
  vidoes      Video[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
}

model GroupMembership {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  groupId   String    @db.ObjectId
  role      GroupRole @default(MEMBER)
  user      UserModel @relation(fields: [userId], references: [id])
  group     Group     @relation(fields: [groupId], references: [id])
  createdAt DateTime  @default(now())
}

model Photo {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  uploadedById String    @db.ObjectId
  uploadedBy   UserModel @relation(fields: [uploadedById], references: [id])
  groupId      String    @db.ObjectId
  group        Group     @relation(fields: [groupId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Video {
  iid          String    @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  uploadedById String    @db.ObjectId
  uploadedBy   UserModel @relation(fields: [uploadedById], references: [id])
  groupId      String    @db.ObjectId
  group        Group     @relation(fields: [groupId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum PrivacyType {
  PERSONAL // Members can see ALL photos
  PUBLIC // Members can only see their OWN photos
}

enum GroupRole {
  ADMIN
  MEMBER
}
